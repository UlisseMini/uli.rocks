title: Polynomial interpolation
subtitle: From scratch, using gaussian elimination
thumb: poly.png


<p>
  Click to add points
</p>

<canvas id="canvas" width=400 height=400></canvas>
<script src="/js/poly/tensor.js"></script>
<script src="/js/poly/poly.js"></script>

<p>
You can break it by choosing two points on the same virtical line, or picking too many points.
</p>

<h2 id="how">How it works</h2>
<p>

Say you have points <code>[(1,2), (3,2), (4,5)]</code>
And say you want to find a quadratic which goes through these points.
<br />
This is the same as the system of equations<br />
<pre>
a(1^2) + b(1) + c = 2
a(3^2) + b(3) + c = 2
a(4^2) + b(4) + c = 2
</pre>

<br />
Expressed in linear algebra this becomes
<pre>
# each row is [1, x, x^2] for each x in points
# (backwards order makes evaluation easier in code)
A = [[1 1 1]
     [1 3 9]
     [1 4 16]]

b = [2, 2, 5] # what we want (y values for points)
x = [a, b, c] # unknowns, what we're solving for
</pre>
Then you can use elimination to solve <code>Ax = b</code>, as I've done <a href="https://github.com/ulissemini/poly">here</a>.

</p>

<h2 id="efficiency">Efficiency</h2>
<p>
There are much more sophisticated techniques like the <a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform">Fast Fourier transform</a> which is <code>O(n log n)</code>, while elimination is <code>O(n^3)</code>.

<br />
I'll be implementing the FFT later, but for now, I've had my interpolation fix :)
</p>
